51. ASP NET core identity setup in blazor application
	ASP.Net core Identity is a membership system. Its allows us to Create,Read,Delete and Update User accounts.
	Supports Account Confirmation
			Athenticate and Autherization.
			Password Recovery
			Two Factor Autherization
			Also External loging providers like Microsoft, Facebook and Google etc.

Note : We are going to use Visual Studio code Scafolded Item Identity
	Check the Check box Override all the files. This going to add all the views and respective source code files to our project.
	This allows us to modify these to meet our application specific requirements.
	-> Add the Data Context class by selecting the default one.
	
Test : Generated file Folder Location
		EmployeeManagement.Web-> Areas ->Identity ->
		1) Pages
		2) Data

Note : In Pages -> Account Page, we have cshtml pages that allows us to		
		1) Register new accounts
		2) Login
		3) LogOut
		4) Forgot Password 
		5) Account confirmation etc

	IdentityHostingStartup.cs add this file in 	Areas->Identity Folder.location.

2) Our next step is to add a DataBase migration to have the Identity database tables generated
	Adding a DataBase migration :
	PackageManager Console -> Make sure Default Project is EmployeeManagement.Web
	1)	PM> Add-Migration AddIdentitySupport
	2)	Apply this migration :
		PM> Update-database
	Note : Now At this steps database migration susccessfully completes.
		Connection string gets created in App.config file
		"EmployeeManagementWebContextConnection": "Server=(localdb)\\mssqllocaldb;Database=EmployeeManagement.Web;Trusted_Connection=True;MultipleActiveResultSets=true"

	Note : IdentityHostingStartup.cs is  a file generated by Scafolded code.
			if not add it to Areas->Identity Folder.

At this point We have Asp.net core Identity Integrated in our blazor application.
		
